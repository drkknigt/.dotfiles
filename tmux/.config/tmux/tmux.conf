# all tmux options
#------------------------------------------------

# enables Xterm with 256 color support
set -g default-terminal "tmux-256color"

# enable mouse
set-option -g mouse on

# set -ga terminal-overrides ",*256col*:Tc"
# set -g default-terminal "xterm-256color"
# set-default colorset-option -ga terminal-overrides ",xterm-256color:Tc"
# set-option -sa terminal-overrides ',alacritty:RGB'

#terminal-overrides matches TERM outside tmux and allows you to modify the capabilities tmux uses when it talks to the terminal it is running it.
set-option -ga terminal-overrides ",xterm-256color:RGB"
set -ag terminal-overrides ",xterm-*:Tc"

# set prefix

set -g prefix C-e

# start window index from 1
set -g base-index 1

# start pane index from 1
set -g pane-base-index 1

# set statusline-style bold
set -g status-style bold

# set lenght of the session name to be atmost 50 chars
set -g status-left-length 50

# set foreground color for statusline
set -g status-fg colour232

# set bg color for status line
set -g status-bg colour234

# set default shell inside tmux
set -g default-shell $SHELL 

# set window status style color
# set -g window-status-style fg=colour232

# set active window color
# set -g window-status-current-style fg=colour16,bold,bg=colour240


set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg


# Bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

#set window tab color for left
set-option -g status-left "\
#[fg=colour240, bg=colour234] ‚ùê #{server_sessions} #S \
#[fg=colour234, bg=colour234]ÓÇ∞#{?client_prefix,#[fg=colour232],}#{?window_zoomed_flag,üîç,}\
#[fg=colour240, bg=colour234] Ôãí  #{session_windows}  
"

#set window tab color for right
set-option -g status-right "\
#[fg=colour234, bg=colour234]ÓÇ≤\
#[fg=colour240, bg=colour234] ÔÅ≥ %b %a %d 20%y\
#[fg=colour240]  Û±ëà %H:%M "

# set active window color
set-window-option -g window-status-current-format "\
#[fg=colour234, bg=colour28]ÓÇ∞\
#[fg=colour232, bg=colour28] #I Û∞´¢\
#[fg=colour232, bg=colour28, bold] #W \
#[fg=colour28, bg=colour234]ÓÇ∞"

# set active window color for unactive
set-window-option -g window-status-format "\
#[fg=colour232,bg=colour25,noitalics]\
#[fg=colour240,bg=colour234] #I\
#[fg=colour240,bg=colour234] #W"

# give names to windows automatically
set-window-option -g automatic-rename on


# set client terminal title
set-option -g set-titles on

# use vi or emac style bindings
setw -g mode-keys vi

# set escape waiting time for tmux
set -g escape-time 1

# renumber the windows after removing a window
set -g renumber-windows on


# set-option -s set-clipboard off
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"

# these options are used for terminal overrides, which are customizations for how a terminal emulator interprets and displays various escape sequences and control codes. These overrides are often used to enable or modify certain visual effects or behaviors in terminal-based applications

set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
set-option -g detach-on-destroy off


# decrease the pane display time

set-option -g display-panes-time 100
set-option -g allow-passthrough on

# all tmux bindings
#----------------------------------

# unbind b
# unbind C-b
# bind 'b' copy-mode
# Vertical splits with v or C-v

# all unbindings of keys
unbind C-v
unbind u
unbind C-u
unbind m
unbind C-m
unbind-key a
unbind-key C-a
unbind y
unbind t
unbind C-t
unbind C-p
unbind o
unbind i
unbind C-o
unbind n
unbind C-n
unbind q
unbind C-q
unbind x
unbind C-l
unbind .
unbind C-.

# split window vertical in current window to the current path
bind-key v split-window -h -c "#{pane_current_path}"
bind-key C-v split-window -h -c '#{pane_current_path}'


# Horizontal splits with v or C-h
bind-key u split-window -c "#{pane_current_path}"
bind-key C-u split-window -c "#{pane_current_path}"

# break pane out of window
bind-key b break-pane -a


# Relaod the file with prefix r
bind R source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# join panes from windows
bind-key Z command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# kill session and move to next if any is available
bind-key / kill-session



# create a new project
bind-key \; popup -h 70% -w 85% -E "tmux_new_project.sh"

# list all tmux sessions to swithch to using fzf
bind-key y display-popup -h 80% -w 80% -E "tmux_session_switch.sh"

# create a new session in some directory using fzf
bind-key Space popup -h 70% -w 85% -E "tmux_create.sh 0"

# create session in recent tmux session directories
bind-key r popup -h 70% -w 85% -E "tmux_create.sh 1"

# kill tmux session from a list using fzf
bind-key \\ display-popup -h 50% -w 60% -E "tmux_kill.sh"

# change to a new directory in a new window using fzf
bind-key c new-window -a  "tmux_change_dir.sh"

# open lazy git in selected directory using fzf
bind-key g new-window -a  "search_git.sh"

# cheat sheat shortcut
bind-key m new-window -a "file_manager.sh 0"


# run ai in tmux locally or via grok
bind-key a new-window -a "ai.sh"

# open lf file manager in current dir
bind-key \' new-window -a -c "#{pane_current_path}" "file_manager.sh 1"


# create a new window using  Ctrl - t or t 
bind-key i new-window -a -c "#{pane_current_path}"

# create new window in directory in which tmux was started
bind-key p new-window -a

# kill window with o
bind-key o kill-window

bind-key x kill-pane

# kill all panes except current
bind-key C-o run-shell "tmux kill-pane -a -t $(tmux list-panes | grep 'active' | cut -d ':' -f1)"

# kill all windows excpet the current
bind-key O run-shell "tmux kill-window -a" 

# kill pane with i
# bind-key C-o kill-server 


# switch sessoins to next and previous
bind-key -r C-n switch-client -n
bind-key -r C-p switch-client -p

# goto previous window

bind-key -r C-] last-window

# q to kill session
bind-key q kill-server

# Quick window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+


# Switching panes 
bind-key  -r \. select-pane -L
bind-key  -r \, select-pane -R 
bind-key  k select-pane -U
bind-key  j select-pane -D

# bind-key C-e send-prefix
bind-key C-e send-prefix

# update arch system
bind-key U new-window -a 'sudo pacman -Syyu ; if [ "$?" = "0" ]; then notify-send  "pacman upgraded stuff successfully"; else notify-send -h string:bgcolor:#ff4f44 "pacman update failed , error occured" ; fi '

# resize panes 
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# vi bindings for copy and paste
bind Escape copy-mode
bind -T copy-mode-vi 'v' send-keys -X begin-selection
bind -T copy-mode-vi 'y' send-keys -X copy-selection


